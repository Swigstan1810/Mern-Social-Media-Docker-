# Define the number of worker processes to handle requests (1 is sufficient for development)
worker_processes 1;

events {
    worker_connections 1024;  # Maximum number of simultaneous connections that can be opened by a worker process
}

http {
    sendfile on;  # Enable sendfile to handle file transfers more efficiently
    large_client_header_buffers 4 32k;  # Allocate larger buffers for client headers to accommodate larger requests

    # Define the backend service (Node.js/Express API)
    upstream backend {
        server backend:8080;  # Point to the backend service container on port 8080
    }

    # Define the frontend service (React app)
    upstream frontend {
        server frontend:5000;  # Point to the frontend service container on port 5000
    }

    # HTTP server block - Redirect all HTTP requests to HTTPS
    server {
        listen 80;  # Listen for HTTP traffic on port 80
        server_name localhost;

        # Redirect all HTTP requests to HTTPS using a 301 redirect
        return 301 https://$host$request_uri;
    }

    # HTTPS server block - Main server configuration
    server {
        listen 443 ssl;  # Listen for HTTPS traffic on port 443
        server_name localhost;

        # SSL certificate and key locations for HTTPS
        ssl_certificate /etc/ssl/certs/localhost.crt;
        ssl_certificate_key /etc/ssl/private/localhost.key;

        # Proxy configuration for frontend
        location / {
            proxy_pass http://frontend;  # Forward requests to the frontend service
            proxy_set_header Host $host;  # Pass original host header
            proxy_set_header X-Real-IP $remote_addr;  # Pass client IP address
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward IP chain
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward request protocol (http/https)
        }

        # Proxy configuration for backend API requests
        location /api/ {
            proxy_pass http://backend;  # Forward requests to the backend service
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket configuration (if backend uses WebSockets, e.g., for real-time features)
        location /socket.io/ {
            proxy_pass http://backend;  # Forward WebSocket requests to the backend
            proxy_http_version 1.1;  # Use HTTP/1.1 for WebSocket support
            proxy_set_header Upgrade $http_upgrade;  # Enable protocol upgrade for WebSocket
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Custom error page configuration for 404 errors
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;  # Default root location for error page
            internal;  # Restrict access to internal requests only
        }

        # Custom error pages for server errors (e.g., 500, 502)
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
